//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace SilverlightMaxi.DatabaseReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InitialData", Namespace="http://schemas.datacontract.org/2004/07/SilverlightMaxi.Web")]
    public partial class InitialData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<SilverlightMaxi.DatabaseReference.Country> countriesField;
        
        private System.Collections.ObjectModel.ObservableCollection<SilverlightMaxi.DatabaseReference.Filter> filtersField;
        
        private System.Collections.ObjectModel.ObservableCollection<SilverlightMaxi.DatabaseReference.FilterValues> greennessValuesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<SilverlightMaxi.DatabaseReference.Country> countries {
            get {
                return this.countriesField;
            }
            set {
                if ((object.ReferenceEquals(this.countriesField, value) != true)) {
                    this.countriesField = value;
                    this.RaisePropertyChanged("countries");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<SilverlightMaxi.DatabaseReference.Filter> filters {
            get {
                return this.filtersField;
            }
            set {
                if ((object.ReferenceEquals(this.filtersField, value) != true)) {
                    this.filtersField = value;
                    this.RaisePropertyChanged("filters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<SilverlightMaxi.DatabaseReference.FilterValues> greennessValues {
            get {
                return this.greennessValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.greennessValuesField, value) != true)) {
                    this.greennessValuesField = value;
                    this.RaisePropertyChanged("greennessValues");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Country", Namespace="http://schemas.datacontract.org/2004/07/SilverlightMaxi.Web")]
    public partial class Country : object, System.ComponentModel.INotifyPropertyChanged {
        
        private double LatField;
        
        private double LonField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Lat {
            get {
                return this.LatField;
            }
            set {
                if ((this.LatField.Equals(value) != true)) {
                    this.LatField = value;
                    this.RaisePropertyChanged("Lat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Lon {
            get {
                return this.LonField;
            }
            set {
                if ((this.LonField.Equals(value) != true)) {
                    this.LonField = value;
                    this.RaisePropertyChanged("Lon");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Filter", Namespace="http://schemas.datacontract.org/2004/07/SilverlightMaxi.Web")]
    public partial class Filter : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string NameField;
        
        private int endYearField;
        
        private int startYearField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int endYear {
            get {
                return this.endYearField;
            }
            set {
                if ((this.endYearField.Equals(value) != true)) {
                    this.endYearField = value;
                    this.RaisePropertyChanged("endYear");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int startYear {
            get {
                return this.startYearField;
            }
            set {
                if ((this.startYearField.Equals(value) != true)) {
                    this.startYearField = value;
                    this.RaisePropertyChanged("startYear");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FilterValues", Namespace="http://schemas.datacontract.org/2004/07/SilverlightMaxi.Web")]
    public partial class FilterValues : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CountryField;
        
        private string NameField;
        
        private string UnitField;
        
        private double ValueField;
        
        private int YearField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Country {
            get {
                return this.CountryField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryField, value) != true)) {
                    this.CountryField = value;
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Unit {
            get {
                return this.UnitField;
            }
            set {
                if ((object.ReferenceEquals(this.UnitField, value) != true)) {
                    this.UnitField = value;
                    this.RaisePropertyChanged("Unit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Year {
            get {
                return this.YearField;
            }
            set {
                if ((this.YearField.Equals(value) != true)) {
                    this.YearField = value;
                    this.RaisePropertyChanged("Year");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="DatabaseReference.DatabaseService")]
    public interface DatabaseService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:DatabaseService/CountUsers", ReplyAction="urn:DatabaseService/CountUsersResponse")]
        System.IAsyncResult BeginCountUsers(System.AsyncCallback callback, object asyncState);
        
        int EndCountUsers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:DatabaseService/getInitialData", ReplyAction="urn:DatabaseService/getInitialDataResponse")]
        System.IAsyncResult BegingetInitialData(System.AsyncCallback callback, object asyncState);
        
        SilverlightMaxi.DatabaseReference.InitialData EndgetInitialData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:DatabaseService/getFilterDetails", ReplyAction="urn:DatabaseService/getFilterDetailsResponse")]
        System.IAsyncResult BegingetFilterDetails(string filterName, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<SilverlightMaxi.DatabaseReference.FilterValues> EndgetFilterDetails(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface DatabaseServiceChannel : SilverlightMaxi.DatabaseReference.DatabaseService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CountUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CountUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getInitialDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getInitialDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SilverlightMaxi.DatabaseReference.InitialData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SilverlightMaxi.DatabaseReference.InitialData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getFilterDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getFilterDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<SilverlightMaxi.DatabaseReference.FilterValues> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<SilverlightMaxi.DatabaseReference.FilterValues>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DatabaseServiceClient : System.ServiceModel.ClientBase<SilverlightMaxi.DatabaseReference.DatabaseService>, SilverlightMaxi.DatabaseReference.DatabaseService {
        
        private BeginOperationDelegate onBeginCountUsersDelegate;
        
        private EndOperationDelegate onEndCountUsersDelegate;
        
        private System.Threading.SendOrPostCallback onCountUsersCompletedDelegate;
        
        private BeginOperationDelegate onBegingetInitialDataDelegate;
        
        private EndOperationDelegate onEndgetInitialDataDelegate;
        
        private System.Threading.SendOrPostCallback ongetInitialDataCompletedDelegate;
        
        private BeginOperationDelegate onBegingetFilterDetailsDelegate;
        
        private EndOperationDelegate onEndgetFilterDetailsDelegate;
        
        private System.Threading.SendOrPostCallback ongetFilterDetailsCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public DatabaseServiceClient() {
        }
        
        public DatabaseServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DatabaseServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DatabaseServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DatabaseServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<CountUsersCompletedEventArgs> CountUsersCompleted;
        
        public event System.EventHandler<getInitialDataCompletedEventArgs> getInitialDataCompleted;
        
        public event System.EventHandler<getFilterDetailsCompletedEventArgs> getFilterDetailsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightMaxi.DatabaseReference.DatabaseService.BeginCountUsers(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCountUsers(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int SilverlightMaxi.DatabaseReference.DatabaseService.EndCountUsers(System.IAsyncResult result) {
            return base.Channel.EndCountUsers(result);
        }
        
        private System.IAsyncResult OnBeginCountUsers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SilverlightMaxi.DatabaseReference.DatabaseService)(this)).BeginCountUsers(callback, asyncState);
        }
        
        private object[] OnEndCountUsers(System.IAsyncResult result) {
            int retVal = ((SilverlightMaxi.DatabaseReference.DatabaseService)(this)).EndCountUsers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCountUsersCompleted(object state) {
            if ((this.CountUsersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CountUsersCompleted(this, new CountUsersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CountUsersAsync() {
            this.CountUsersAsync(null);
        }
        
        public void CountUsersAsync(object userState) {
            if ((this.onBeginCountUsersDelegate == null)) {
                this.onBeginCountUsersDelegate = new BeginOperationDelegate(this.OnBeginCountUsers);
            }
            if ((this.onEndCountUsersDelegate == null)) {
                this.onEndCountUsersDelegate = new EndOperationDelegate(this.OnEndCountUsers);
            }
            if ((this.onCountUsersCompletedDelegate == null)) {
                this.onCountUsersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCountUsersCompleted);
            }
            base.InvokeAsync(this.onBeginCountUsersDelegate, null, this.onEndCountUsersDelegate, this.onCountUsersCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightMaxi.DatabaseReference.DatabaseService.BegingetInitialData(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetInitialData(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SilverlightMaxi.DatabaseReference.InitialData SilverlightMaxi.DatabaseReference.DatabaseService.EndgetInitialData(System.IAsyncResult result) {
            return base.Channel.EndgetInitialData(result);
        }
        
        private System.IAsyncResult OnBegingetInitialData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SilverlightMaxi.DatabaseReference.DatabaseService)(this)).BegingetInitialData(callback, asyncState);
        }
        
        private object[] OnEndgetInitialData(System.IAsyncResult result) {
            SilverlightMaxi.DatabaseReference.InitialData retVal = ((SilverlightMaxi.DatabaseReference.DatabaseService)(this)).EndgetInitialData(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetInitialDataCompleted(object state) {
            if ((this.getInitialDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getInitialDataCompleted(this, new getInitialDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getInitialDataAsync() {
            this.getInitialDataAsync(null);
        }
        
        public void getInitialDataAsync(object userState) {
            if ((this.onBegingetInitialDataDelegate == null)) {
                this.onBegingetInitialDataDelegate = new BeginOperationDelegate(this.OnBegingetInitialData);
            }
            if ((this.onEndgetInitialDataDelegate == null)) {
                this.onEndgetInitialDataDelegate = new EndOperationDelegate(this.OnEndgetInitialData);
            }
            if ((this.ongetInitialDataCompletedDelegate == null)) {
                this.ongetInitialDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetInitialDataCompleted);
            }
            base.InvokeAsync(this.onBegingetInitialDataDelegate, null, this.onEndgetInitialDataDelegate, this.ongetInitialDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightMaxi.DatabaseReference.DatabaseService.BegingetFilterDetails(string filterName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetFilterDetails(filterName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<SilverlightMaxi.DatabaseReference.FilterValues> SilverlightMaxi.DatabaseReference.DatabaseService.EndgetFilterDetails(System.IAsyncResult result) {
            return base.Channel.EndgetFilterDetails(result);
        }
        
        private System.IAsyncResult OnBegingetFilterDetails(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string filterName = ((string)(inValues[0]));
            return ((SilverlightMaxi.DatabaseReference.DatabaseService)(this)).BegingetFilterDetails(filterName, callback, asyncState);
        }
        
        private object[] OnEndgetFilterDetails(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<SilverlightMaxi.DatabaseReference.FilterValues> retVal = ((SilverlightMaxi.DatabaseReference.DatabaseService)(this)).EndgetFilterDetails(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetFilterDetailsCompleted(object state) {
            if ((this.getFilterDetailsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getFilterDetailsCompleted(this, new getFilterDetailsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getFilterDetailsAsync(string filterName) {
            this.getFilterDetailsAsync(filterName, null);
        }
        
        public void getFilterDetailsAsync(string filterName, object userState) {
            if ((this.onBegingetFilterDetailsDelegate == null)) {
                this.onBegingetFilterDetailsDelegate = new BeginOperationDelegate(this.OnBegingetFilterDetails);
            }
            if ((this.onEndgetFilterDetailsDelegate == null)) {
                this.onEndgetFilterDetailsDelegate = new EndOperationDelegate(this.OnEndgetFilterDetails);
            }
            if ((this.ongetFilterDetailsCompletedDelegate == null)) {
                this.ongetFilterDetailsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetFilterDetailsCompleted);
            }
            base.InvokeAsync(this.onBegingetFilterDetailsDelegate, new object[] {
                        filterName}, this.onEndgetFilterDetailsDelegate, this.ongetFilterDetailsCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SilverlightMaxi.DatabaseReference.DatabaseService CreateChannel() {
            return new DatabaseServiceClientChannel(this);
        }
        
        private class DatabaseServiceClientChannel : ChannelBase<SilverlightMaxi.DatabaseReference.DatabaseService>, SilverlightMaxi.DatabaseReference.DatabaseService {
            
            public DatabaseServiceClientChannel(System.ServiceModel.ClientBase<SilverlightMaxi.DatabaseReference.DatabaseService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginCountUsers(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("CountUsers", _args, callback, asyncState);
                return _result;
            }
            
            public int EndCountUsers(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("CountUsers", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetInitialData(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("getInitialData", _args, callback, asyncState);
                return _result;
            }
            
            public SilverlightMaxi.DatabaseReference.InitialData EndgetInitialData(System.IAsyncResult result) {
                object[] _args = new object[0];
                SilverlightMaxi.DatabaseReference.InitialData _result = ((SilverlightMaxi.DatabaseReference.InitialData)(base.EndInvoke("getInitialData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetFilterDetails(string filterName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = filterName;
                System.IAsyncResult _result = base.BeginInvoke("getFilterDetails", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<SilverlightMaxi.DatabaseReference.FilterValues> EndgetFilterDetails(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<SilverlightMaxi.DatabaseReference.FilterValues> _result = ((System.Collections.ObjectModel.ObservableCollection<SilverlightMaxi.DatabaseReference.FilterValues>)(base.EndInvoke("getFilterDetails", _args, result)));
                return _result;
            }
        }
    }
}
